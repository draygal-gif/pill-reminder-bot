import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TOKEN")
if not TOKEN:
    raise SystemExit("‚ùå ERROR: TELEGRAM_BOT_TOKEN not set in Render environment variables")

# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
scheduler.start()

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.message.chat_id
    user_data[chat_id] = {"reminders": []}

    keyboard = [["üíä –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "üìÖ –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"], ["‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ üíä",
        reply_markup=markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)
async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    remind_time = datetime.now() + timedelta(seconds=10)
    scheduler.add_job(send_reminder, 'date', run_date=remind_time, args=[chat_id])
    await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 10 —Å–µ–∫—É–Ω–¥!")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(chat_id):
    from telegram import Bot
    bot = Bot(TOKEN)
    await bot.send_message(chat_id=chat_id, text="üíä –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É!")

# –ö–Ω–æ–ø–∫–∞ ‚Äú‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É‚Äù
async def mark_taken(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! üí™ –Ø –æ—Ç–º–µ—á—É, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É.")

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "–ö–Ω–æ–ø–∫–∞ '‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É' ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å" in text:
        await add_reminder(update, context)
    elif "–ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É" in text:
        await mark_taken(update, context)
    elif "–ü–æ–º–æ—â—å" in text:
        await help_command(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.")

# üîπ –ì–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî —Ç–µ–ø–µ—Ä—å –±–µ–∑ asyncio.run()
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_reminder))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("‚úÖ Bot started successfully")
    app.run_polling()  # <-- —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤

if __name__ == "__main__":
    main()
    
