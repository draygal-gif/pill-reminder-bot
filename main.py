import logging
import os
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ContextTypes
)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èimport os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TOKEN")
if not TOKEN:
    raise SystemExit("‚ùå ERROR: TELEGRAM_BOT_TOKEN not set in Render environment variables")

# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
scheduler.start()

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.message.chat_id
    user_data[chat_id] = {"reminders": []}

    keyboard = [["üíä –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "üìÖ –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"], ["‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ üíä",
        reply_markup=markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)
async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    remind_time = datetime.now() + timedelta(seconds=10)
    scheduler.add_job(send_reminder, 'date', run_date=remind_time, args=[chat_id])
    await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 10 —Å–µ–∫—É–Ω–¥!")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(chat_id):
    from telegram import Bot
    bot = Bot(TOKEN)
    await bot.send_message(chat_id=chat_id, text="üíä –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É!")

# –ö–Ω–æ–ø–∫–∞ ‚Äú‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É‚Äù
async def mark_taken(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! üí™ –Ø –æ—Ç–º–µ—á—É, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É.")

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "–ö–Ω–æ–ø–∫–∞ '‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É' ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—ë–º"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å" in text:
        await add_reminder(update, context)
    elif "–ü—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫—É" in text:
        await mark_taken(update, context)
    elif "–ü–æ–º–æ—â—å" in text:
        await help_command(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_reminder))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("‚úÖ Bot started successfully")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
user_schedules = {}

scheduler = AsyncIOScheduler()


# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def remind(user_id, text, application):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª", callback_data="done")]
    ])
    await application.bot.send_message(
        chat_id=user_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
        reply_markup=keyboard
    )


# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="add_course")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")]
    ]

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö üíä\n"
        "–î–æ–±–∞–≤—å –∫—É—Ä—Å –∏ —è –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    if user_id not in user_schedules:
        user_schedules[user_id] = []


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()

    if query.data == "add_course":
        context.user_data["state"] = "waiting_course"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏ —Å—Ö–µ–º—É —Ç–∞–∫:\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª-–≤–æ –¥–Ω–µ–π, –∫–æ–ª-–≤–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å, –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—ë–º–∞ (–ß–ß:–ú–ú)\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫, 5, 3, 09:00"
        )

    if query.data == "my_courses":
        if not user_schedules.get(user_id):
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ üòå")
        else:
            text = "üìÖ –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
            for c in user_schedules[user_id]:
                text += f"‚Ä¢ {c['name']} ‚Äî {c['days']} –¥–Ω–µ–π √ó {c['times']} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
            await query.edit_message_text(text)

    if query.data == "done":
        await query.edit_message_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!")


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") == "waiting_course":
        try:
            name, days, times, start_time = update.message.text.split(",")
            name = name.strip()
            days = int(days.strip())
            times = int(times.strip())
            start_time = start_time.strip()

            user_id = update.effective_user.id
            start_dt = datetime.strptime(start_time, "%H:%M").time()

            course = {
                "name": name,
                "days": days,
                "times": times,
                "start": start_dt
            }

            user_schedules[user_id].append(course)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for d in range(days):
                for t in range(times):
                    remind_time = (
                        datetime.now() +
                        timedelta(days=d)
                    ).replace(
                        hour=start_dt.hour + t * (12 // max(times, 1)),
                        minute=start_dt.minute,
                        second=0
                    )
                    scheduler.add_job(
                        remind,
                        trigger="date",
                        run_date=remind_time,
                        args=[user_id, name, context.application]
                    )

            context.user_data["state"] = None

            await update.message.reply_text("‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!")

        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ ‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


# ‚úÖ MAIN
async def main():
    if not TOKEN:
        print("‚ùå Error: TELEGRAM_BOT_TOKEN environment variable is not set!")
        print("Please set your Telegram bot token in the Secrets tab.")
        return

    scheduler.start()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("courses", button))
    app.add_handler(CommandHandler("done", button))
    app.add_handler(CommandHandler("cancel", start))
    app.add_handler(CommandHandler("reset", start))
    app.add_handler(CommandHandler("stop", start))
    app.add_handler(CommandHandler("add", button))
    app.add_handler(CommandHandler("my", button))
    app.add_handler(CommandHandler("time", button))
    app.add_handler(CommandHandler("course", button))
    app.add_handler(CommandHandler("pills", button))
    app.add_handler(CommandHandler("med", button))
    app.add_handler(CommandHandler("pill", button))
    app.add_handler(CommandHandler("tablet", button))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("schedule", start))
    app.add_handler(CommandHandler("next", start))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("confirm", button))
    app.add_handler(CommandHandler("note", button))

    app.add_handler(CommandHandler("echo", start))
    app.add_handler(CommandHandler("list", button))
    app.add_handler(CommandHandler("info", start))
    app.add_handler(CommandHandler("use", start))
    app.add_handler(CommandHandler("status", start))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(CommandHandler("text", handle_text))
    app.add_handler(CommandHandler("message", handle_text))
    app.add_handler(CommandHandler("msg", handle_text))
    app.add_handler(CommandHandler("send", handle_text))
    app.add_handler(CommandHandler("input", handle_text))
    app.add_handler(CommandHandler("write", handle_text))

    # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(CommandHandler("start", start))

    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("courses", button))

    app.add_handler(CommandHandler("med", start))

    app.add_handler(CommandHandler("pill", start))


    app.add_handler(CommandHandler("course", start))


    app.add_handler(CommandHandler("list", start))


    app.add_handler(CommandHandler("my", start))


    app.add_handler(CommandHandler("schedule", start))


    app.add_handler(CommandHandler("calendar", start))

    app.add_handler(CommandHandler("reset", start))

    # —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
    from telegram.ext import MessageHandler, filters
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    async with app:
        await app.start()
        await app.updater.start_polling()

        try:
            import asyncio
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            print("\nüëã Stopping bot...")
        finally:
            await app.updater.stop()
            await app.stop()


if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
